doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        include ../public/components/color-lab.pug
        link(rel="stylesheet", href="/css/OpenPalette.css")
        title Lemon Teams: Palette
    body#body 
        include ../public/layouts/navigation.pug
        .container
            -if(isPaletteOurs == true)
                form(action="/delete-palette", method="post") 
                    input(type="hidden", value=palette.code, name="code")
                    .btn-actions 
                        input(type="submit" value="Delete" class="btn") 
            -else
                -if (palette.Report.includes(user.identity))
                    .btn-actions#report-btn Reported
                -else
                    .btn-actions#report-btn 
                        .btn Report
            h2#headingLogic #{palette.name}
            h4#descriptionLogic #{palette.description}
            -if(palette.visibility == "private")
                .privatePalette 
                    .Private Private
            .palette-container
                each color in [palette.color1, palette.color2, palette.color3, palette.color4, palette.color5, palette.color6, palette.color7, palette.color8, palette.color9, palette.color10]
                    if color
                        .color-box(data-color=`${color}`, style=`background: ${color};`)= color
            .palette-details
                p 
                    | Author: 
                    a.authorProfile(href=`/account/`+author.identity) #{author.name}
                p Publishing Date: #{palette.publishing_date}
                p Views: #{palette.views}
            .likes 
                .alignment 
                    if palette.liked.includes(user.identity)
                        i.fa-solid.fa-heart(style="color: #ff0000;" id="like-btn")
                    else
                        i.fa-regular.fa-heart(style="color: #ff0000;" id="like-btn")
                    .number #{palette.liked.length}
            .comments 
                form(id="comment-form")
                    input(type="hidden" id="comment-name" placeholder="Your Name" required value=user.name)
                    textarea(id="comment-text" placeholder="Your Comment" required)
                    button(type="submit") Submit
                .comment-list
                    each comment in palette.comments
                        .comment #{comment.name}: #{comment.comment}
        include ../public/layouts/footer.pug
        script(src="/js/OpenPalette.js")
        script(src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.5/socket.io.min.js' integrity='sha512-11t8Q+vY9JlCrr+PveZKTYJq8n7O09Y5X/pk/aMd3vJugSvu4xOunGEUzaADqL3I8cZKE/pBwwCfXzDkRJh2sQ==' crossorigin='anonymous')
        script.
            const socket = io();
            document.addEventListener('DOMContentLoaded', (event) => {
            const likeBtn = document.getElementById('like-btn');
            const reportBtn = document.getElementById('report-btn');
            const commentForm = document.getElementById('comment-form');
            const commentNameInput = document.getElementById('comment-name');
            const commentTextArea = document.getElementById('comment-text');
            const commentList = document.querySelector('.comment-list');
            const userId = '#{user.identity}';
            const paletteIdentity = '#{palette.code}';

            likeBtn.addEventListener('click', () => {
                socket.emit('toggle-like', { userId, paletteIdentity });
            });

            commentForm.addEventListener('submit', (event) => {
                event.preventDefault();
                const name = commentNameInput.value.trim();
                const comment = commentTextArea.value.trim();

                if (name && comment) {
                    socket.emit('add-comment', { name, comment, paletteIdentity });
                    commentNameInput.value = '';
                    commentTextArea.value = '';
                }
            });

            socket.on('comment-updated', (data) => {
                commentList.innerHTML = '';
                if (data.paletteIdentity === paletteIdentity) {
                    data.comments.forEach(comment => {
                        const commentElement = document.createElement('div');
                        commentElement.classList.add('comment');
                        commentElement.textContent = `${comment.name}: ${comment.comment}`;
                        commentList.appendChild(commentElement);
                    });
                }
            });

            socket.on('like-updated', (data) => {
                if (data.paletteIdentity === paletteIdentity) {
                    const likeIcon = document.getElementById('like-btn');
                    if (likeIcon.classList.contains('fa-regular')) {
                        likeIcon.classList.remove('fa-regular');
                        likeIcon.classList.add('fa-solid');
                    } else {
                        likeIcon.classList.remove('fa-solid');
                        likeIcon.classList.add('fa-regular');
                    }
                    document.querySelector('.number').textContent = data.likes;
                }
            });

            socket.on('report-updated', (data) => {
                if (data.paletteIdentity === paletteIdentity) {
                    const reportBtn = document.getElementById('report-btn');
                    reportBtn.innerHTML = data.reported ? '<div class="btn" id="report-btn">Reported</div>' : '<div class="btn">Report</div>';
                }
            });
            if(reportBtn){
            reportBtn.addEventListener('click', () => {
                socket.emit('toggle-report', { userId, paletteIdentity });
            });
            }
            });
